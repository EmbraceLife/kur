---

settings:

  # Where to get the data
  cifar: &cifar
    url: "https://www.cs.toronto.edu/~kriz/cifar-10-python.tar.gz"
    checksum: "6d958be074577803d12ecdefd02955f39262c83c16fe9348329d7fe0b5c001ce"
    path: "~/kur"

  # Backend to use
  backend:
    # name: keras
    name: pytorch
  # Hyperparameters
  cnn:
    kernels: [64, 32]
    size: [2, 2]
    strides: [1, 1]

# The model itself.
# This is parsed immediately after the "parameters" block.
model:
  - input: images
  - for:
      range: "{{ cnn.kernels|length }}"
      iterate:
        - convolution:
            kernels: "{{ cnn.kernels[index] }}"
            size: "{{ cnn.size }}"
            strides: "{{ cnn.strides }}"
            border: valid
        - activation: relu
  - flatten:
  - dense: 10
  - activation: softmax
    name: labels

train:
  data:
    - cifar:
        <<: *cifar
        parts: [1, 2, 3, 4]
  provider:
    batch_size: 32
    num_batches: 1
  log: ../../kur_examples/cifar/cifar-log
  epochs: 1
  weights:
    initial: ../../kur_examples/cifar/cifar.best.valid.w
    best: ../../kur_examples/cifar/cifar.best.train.w
    last: ../../kur_examples/cifar/cifar.last.w
  hooks:
    - plot_weights:
        plot_every_n_epochs: 1
        plot_directory: ../../kur_examples/cifar/plot_weights2
        weight_file: ../../kur_examples/cifar/cifar.best.valid.w
        with_weights:
          - ["convolution", "kernel"]
          - ["convolution", "weight"]
  optimizer:
    name: adam
    learning_rate: 0.001

validate:
  data:
    - cifar:
       <<: *cifar
       parts: 5
  provider:
    num_batches: 2
  weights: ../../kur_examples/cifar/cifar.best.valid.w

test: &test
  data:
    - cifar:
       <<: *cifar
       parts: test
  weights: ../../kur_examples/cifar/cifar.best.valid.w
  provider:
    num_batches: 10

evaluate:
  <<: *test
  destination: ../../kur_examples/cifar/cifar.results.pkl

loss:
  - target: labels
    name: categorical_crossentropy
...
